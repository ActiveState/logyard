---
# cloud_events configuration

# Message key is determined as "event.#{name}" where `name` is the 2nd
# level child. For instance, the event spec "process_start" under
# "supervisord" event group below corresponds to the message key
# "event.process_start".

# The two formats under the "__all__" group -- "error" and "warning"
# -- parse the default vcap_logger logging format, which is also used
# by the Go components.

# How to add events?
# ==================
#
# Adding a *new* event requires modifying the cloud_events
# configuration:
#
#  * Edit, and copy this file to the VM.
#  * Run `kato config set --yaml cloud_events / < cloud_events.yml`.
#  * Run `kato process restart cloud_events` on all nodes.
#  * Verify that your changes have taken effect using:
#      logyard-cli stream event

events:
  supervisord:
    process_start:
      substring: "entered RUNNING state"
      regex: '(\w+) entered RUNNING'
      sample: "INFO success: memcached_node entered RUNNING state, process has ..."
      format: "Process '$1' started on a node"
    process_stop:
      substring: "stopped"
      regex: 'stopped: (\w+) \((.+)\)'
      sample: 'INFO stopped: mysql_node (terminated by SIGKILL)'
      severity: WARNING
      format: "Process '$1' stopped on a node ($2)"
    process_exit:
      substring: "exited"
      regex: 'exited: (\w+) \((.+)\)'
      sample: 'INFO exited: dea (exit status 1; not expected)'
      severity: ERROR
      format: "Process '$1' crashed on a node ($2)"
  kato:
    kato_action:
      substring: 'INVOKE'
      regex: 'INVOKE (.+)'
      sample: '[info] (12339) INVOKE kato start'
      format: '$1'
  nginx:
    nginx_error:
      substring: "error"
      regex: '\[error\] (.+)$'
      sample: '23:29:20 [error] 8474#0: *163529 connect() failed(111: Connection refused)'
      severity: ERROR
      format: "nginx error: $1"
  kernel:
    oom_killer:
      substring: "oom-killer"
      regex: '(\w+ invoked oom\-killer)'
      sample: '[21510.516563] uwsgi invoked oom-killer: gfp_mask=0x50'
      severity: WARNING
      format: "OOM action: $1"
  cloud_controller:
    timeline:
      substring: "TIMELINE"
      regex: 'INFO -- TIMELINE (.+)$'
      sample: 'INFO -- TIMELINE {"event":"APP_DELETE", "app":{"id":1,"name":"foo"}, "user":{"id":1,"email":"foo@bar.com"}}'
      handlertype: json
      format: 'Timeline event "{{.event}}" for app {{.app.name}}'
  dea:
    dea_start:
      substring: "START_INSTANCE"
      regex: 'EVENT -- START_INSTANCE (.+)$'
      sample: 'EVENT -- START_INSTANCE {"app_name":"env","app_id":6,"instance":0,"dea_id":"hash"}'
      handlertype: json
      format: 'Starting application "{{.app_name}}" on DEA {{.dea_id}}'
    dea_stop:
      substring: "STOPPING_INSTANCE"
      regex: 'EVENT -- STOPPING_INSTANCE (.+)$'
      sample: 'EVENT -- STOPPING_INSTANCE {"app_id":6,"app_name":"env","instance":0,"dea_id":"deahas"}'
      handlertype: json
      format: 'Stopping application "{{.app_name}}" on DEA {{.dea_id}}'
    dea_ready:
      substring: "INSTANCE_READY"
      regex: 'EVENT -- INSTANCE_READY (.+)$'
      sample: 'EVENT -- INSTANCE_READY {"app_id":6,"app_name":"env","instance":0}'
      handlertype: json
      format: 'Application "{{.app_name}}" is now running on DEA {{.dea_id}}'
    app_exited:
      substring: "INSTANCE_EXITED"
      regex: "EVENT -- INSTANCE_EXITED (.+)$"
      sample: 'EVENT -- INSTANCE_EXITED {"app_id":6,"app_name":"converter","instance":0,"uptime":231,"exitcode":0}'
      handlertype: json
      format: 'Application "{{.app_name}}" exited on DEA {{.dea_id}} with exit code {{.exitcode}} after uptime {{.uptime}}'
  __all__:
    error:
      substring: ERROR
      regex: 'ERROR -- (.+)$'
      sample: 'postgresql_gateway - pid=4340 tid=2e99 fid=bad6  ERROR -- Failed fetching handles: Errno::ETIMEDOUT'
      severity: ERROR
      format: '$1'
    warning:
      substring: WARN
      regex: 'WARN -- (.+)$'
      sample: 'WARN -- Took 18.09s to process ps and du stats'
      severity: WARNING
      format: '$1'
  filesystem_node:
    service_provision:
      substring: "Successfully provisioned service"
      regex: '^\[[^\]]+\] (\w+) .+ Successfully provisioned service for request'
      sample: '[2012-11-01 07:30:51.290253] redis_node_1 - pid=23282 tid=d0cf fid=5280 DEBUG -- MaaS-Node: Successfully provisioned service for request {...}'
      format: 'Provisioned a new service on $1'
  mongodb_node:
    service_provision:
      substring: "Successfully provisioned service"
      regex: '^\[[^\]]+\] (\w+) .+ Successfully provisioned service for request'
      sample: '[2012-11-01 07:30:51.290253] redis_node_1 - pid=23282 tid=d0cf fid=5280 DEBUG -- MaaS-Node: Successfully provisioned service for request {...}'
      format: 'Provisioned a new service on $1'
  postgresql_node:
    service_provision:
      substring: "Successfully provisioned service"
      regex: '^\[[^\]]+\] (\w+) .+ Successfully provisioned service for request'
      sample: '[2012-11-01 07:30:51.290253] redis_node_1 - pid=23282 tid=d0cf fid=5280 DEBUG -- MaaS-Node: Successfully provisioned service for request {...}'
      format: 'Provisioned a new service on $1'
  mysql_node:
    service_provision:
      substring: "Successfully provisioned service"
      regex: '^\[[^\]]+\] (\w+) .+ Successfully provisioned service for request'
      sample: '[2012-11-01 07:30:51.290253] redis_node_1 - pid=23282 tid=d0cf fid=5280 DEBUG -- MaaS-Node: Successfully provisioned service for request {...}'
      format: 'Provisioned a new service on $1'
  redis_node:
    service_provision:
      substring: "Successfully provisioned service"
      regex: '^\[[^\]]+\] (\w+) .+ Successfully provisioned service for request'
      sample: '[2012-11-01 07:30:51.290253] redis_node_1 - pid=23282 tid=d0cf fid=5280 DEBUG -- MaaS-Node: Successfully provisioned service for request {...}'
      format: 'Provisioned a new service on $1'
  memcached_node:
    service_provision:
      substring: "Successfully provisioned service"
      regex: '^\[[^\]]+\] (\w+) .+ Successfully provisioned service for request'
      sample: '[2012-11-01 07:30:51.290253] redis_node_1 - pid=23282 tid=d0cf fid=5280 DEBUG -- MaaS-Node: Successfully provisioned service for request {...}'
      format: 'Provisioned a new service on $1'
  rabbit_node:
    service_provision:
      substring: "Successfully provisioned service"
      regex: '^\[[^\]]+\] (\w+) .+ Successfully provisioned service for request'
      sample: '[2012-11-01 07:30:51.290253] redis_node_1 - pid=23282 tid=d0cf fid=5280 DEBUG -- MaaS-Node: Successfully provisioned service for request {...}'
      format: 'Provisioned a new service on $1'
  harbor_node:
    service_provision:
      substring: "Successfully provisioned service"
      regex: '^\[[^\]]+\] (\w+) .+ Successfully provisioned service for request'
      sample: '[2012-11-01 07:30:51.290253] redis_node_1 - pid=23282 tid=d0cf fid=5280 DEBUG -- MaaS-Node: Successfully provisioned service for request {...}'
      format: 'Provisioned a new service on $1'
