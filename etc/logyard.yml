---
# logyard configuration.
# Must be loaded first using:
# $ ruby -ryaml -rjson -e 'puts YAML.load_file("etc/logyard.yml").to_json'  | redis-cli -p 5454 -x set config:logyard

# A configurable set of format strings that can be referred to from
# the drain URIs.
drainformats:
  systail: "{{.Name}}@{{.NodeID}}: {{.Text}}"
  apptail: "{{.HumanTime}} {{.Source}}.{{.InstanceIndex}}: {{.Text}}"
  event: "{{.Type}}@{{.NodeID}}: {{.Text}} -- via {{.Process}}"
  systail_syslog: "<{{.Syslog.Priority}}>{{.Syslog.Time}} - {{.NodeID}} {{.Name}} - - - {{.Text}}"

# retrylimit prevents infinite retrying of certain drains (identified
# by name prefix) by putting a upper bound on the how long a drain
# will be retried during successive failures.
# Values must be greater than 21m (21 minutes). See
# http://golang.org/pkg/time/#ParseDuration for full format
# specification.
retrylimits:
  # retry continually failing temporary drains (eg: kato tail) for max
  # 25 minutes.
  tmp.: 25m
  # retry continually failing app drains (added via `stackato drain
  # add`) for max 1 day.
  appdrain.: 24h
  # All other drains (added via `kato drain add`) will be retried
  # indefinitely.

# Builtin list of drains.
drains:
  # Bounded storage for application logs, to be accessed from `s
  # logs`.  limit: how many log lines per app to keep? (XXX: must be a
  # low value until we move away from redis for app log buffer) heroku
  # uses 1500; https://devcenter.heroku.com/articles/logging#log
  builtin.apptail: "redis://stackato-core:6464/?filter=apptail&limit=400"
  # Recent history of kato commands ran across the cluster stored as
  # cloud events JSON
  builtin.katohistory: "redis://stackato-core:6464/?filter=event.kato_action&limit=256&key=kato_history"
  # Recent cloud events from across the cluster
  builtin.cloudevents: "redis://stackato-core:6464/?filter=event&limit=256&key=cloud_events"

